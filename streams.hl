(* ========================================================================= *)
(* Semicertified interactive logic programming.                              *)
(*                                                                           *)
(* Copyright (c) 2017-2018 Marco Maggesi, Massimo Nocentini                  *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Basic implemenation of stremas.                                           *)
(* ------------------------------------------------------------------------- *)

type 'a stream = Empty | Cons of 'a * (unit -> 'a stream);;

let rec mplusf (c1: 'a stream) (c2: unit -> 'a stream) : 'a stream =
   match c1 with
     Empty -> c2 ()
   | Cons (x, f) -> Cons (x, fun _ -> mplusf (c2 ()) f);;

let rec concatf (c1: 'a stream) (c2: unit -> 'a stream) : 'a stream =
  match c1 with
    Empty -> c2 ()
  | Cons (x, f) -> Cons (x, fun _ -> concatf (f ()) c2);;

let rec bind (c : 'a stream) (g : 'a -> 'b stream) : 'b stream =
  match c with
    Empty -> Empty
  | Cons (x, f) -> mplusf (g x) (fun _ -> bind (f ()) g);;

let next : 'a stream -> 'a stream =
  function
    Empty -> failwith "Empty stream"
  | Cons (x, f) -> f ();;

let get : 'a stream -> 'a =
  function
    Empty -> failwith "Empty stream"
  | Cons (x,_) -> x;;

let rec take (n:int) : 'a stream -> 'a list =
  function
  | Cons(x,f) when n > 0 -> x :: if n = 1 then [] else take (n-1) (f())
  | _ -> [];;

let rec drop (n : int) : 'a stream -> 'a stream =
  function
      Empty -> Empty
    | s when n <= 0 -> s
    | Cons (x,f) -> drop (n - 1) (f ());;

let rec list_of_stream (s : 'a stream) : 'a list =
  match s with
    Empty -> []
  | Cons(x,f) -> x :: list_of_stream (f ());;

let rec stream_map (f : 'a -> 'b) (s : 'a stream) : 'b stream =
  match s with
    Empty -> Empty
  | Cons (x,s') -> Cons (f x, fun () -> stream_map f (s' ()));;

let rec stream_mapfilter (f : 'a -> 'b) (s : 'a stream) : 'b stream =
  match s with
    Empty -> Empty
  | Cons (x,s') ->
      match try Some (f x) with Failure _ -> None with
        None -> stream_mapfilter f (s' ())
      | Some y -> Cons (y, fun () -> stream_mapfilter f (s' ()));;

let singleton (x : 'a) : 'a stream = Cons(x, fun _ -> Empty);;

let rec stream_of_list (l : 'a list) : 'a stream =
  match l with
    [] -> Empty
  | h :: t -> Cons(h,fun () -> stream_of_list t);;

(* ------------------------------------------------------------------------- *)
(* Merge a list of (suspended) streams.                                      *)
(* ------------------------------------------------------------------------- *)

let mergef_stream :
  ('b -> 'a stream) list -> (unit -> 'a stream) list -> 'b -> 'a stream =

  (* ---------------------------------------------------------------------- *)
  (* Questa definizione generalizza il tipo di mergef_stream perché in ML   *)
  (* nel corpo della definizione di una funzione ricorsiva le variabili     *)
  (* di tipo non si possono istanziare.                                     *)
  (* ---------------------------------------------------------------------- *)

  let rec mergef
        (l : (unit -> 'a stream) list)
        (r : (unit -> 'a stream) list) : 'a stream =
    match l with
      [] -> if r = [] then Empty else mergef (rev r) []
    | f::fs ->
        match f() with
          Empty -> mergef fs r
        | Cons (x,f') -> Cons (x, fun () -> mergef fs (f' :: r)) in

  let rec mergef_stream l r b =
    match l with
      [] -> if r = [] then Empty else mergef (rev r) []
    | f::fs ->
        match f b with
          Empty -> mergef_stream fs r b
        | Cons (x,f') -> Cons (x, fun () -> mergef_stream fs (f' :: r) b) in
  mergef_stream;;

let merge_stream : 'a stream list -> 'a stream =
  let rec unzip (l : 'a stream list) (hs,ts) : 'a list * (unit->'a stream) list =
    match l with
      [] -> (hs,ts)
    | Empty :: l' -> unzip l' (hs,ts)
    | Cons(x,f)::l' -> unzip l' (x::hs,f::ts) in
  fun l ->
    let hs,ts = unzip l ([],[]) in
    concatf (stream_of_list (rev hs)) (mergef_stream (rev ts) []);;

(* ------------------------------------------------------------------------- *)
(* Cut.                                                                      *)
(* ------------------------------------------------------------------------- *)

let cut_stream (f:'a -> 'b stream) (g:'a -> 'b stream) : 'a -> 'b stream =
  fun x ->
    let s = f x in
    match s with
      Empty -> g x
    | Cons _ -> s;;

(* ------------------------------------------------------------------------- *)
(* Further helping functions.                                                *)
(* ------------------------------------------------------------------------- *)

(*
let empty : 'a stream = Empty;;

let cons (x : 'a) (s : 'a stream) : 'a stream = Cons(x, fun _ -> s);;

let is_empty = function Empty -> true | _ -> false;;

let split (s : 'a stream) : 'a * (unit -> 'a stream) =
  match s with
    Empty -> failwith "Empty stream"
  | Cons (x, s') -> (x, s');;

let rec concat (c1: 'a stream) (c2: 'a stream) : 'a stream =
  concatf c1 (fun _ -> c2);;
*)

(* ------------------------------------------------------------------------- *)
(* Examples.                                                                 *)
(* ------------------------------------------------------------------------- *)

let rec const (x : 'a) : 'a stream = Cons(x, fun _ -> const x);;

let rec nats n = Cons(n, fun _ -> nats (n+1));;

let twos_and_zeros_test =
  assert ([2; 0; 2; 0; 2; 0; 2; 0; 2; 0] =
          take 10 (mplusf (const 2) (fun () -> const 0)));;

let bind_test =
  assert ([2; 4; 2; 6; 2; 4; 2; 8; 2; 4; 2; 6; 2; 4; 2; 10; 2;
           4; 2; 6; 2; 4; 2; 8; 2; 4; 2; 6; 2; 4] =
          take 30 (bind (nats 1) (fun n -> const (2 * n))));;
(*
    previous result should be interpreted as follows:
    2₀ 2₂ 2₄ 2₆ 2₈ 2₁₀ 2₁₂ 2₁₄ 2₁₆ 2₁₈ 2₂₀ 2₂₂ 2₂₄ 2₂₆  2₂₈
    4₁ 4₅ 4₉ 4₁₃ 4₁₇ 4₂₁ 4₂₅ 4₂₉
    6₃ 6₁₁ 6₁₉ 6₂₇
    8₇ 8₂₃
    10₁₅
    where subscripts denotes positions in the list of items they are attached to.
*)

(* -------------------------------------------------------------------------- *)
(* Tests and examples for mergef_stream.                                      *)
(* -------------------------------------------------------------------------- *)

(*;;
take 9 (
merge_stream
  [stream_of_list [1;2;3;4];
   stream_of_list [-1;-2;-3;-4]]);;
take 15 (
merge_stream
  [stream_of_list [1;2;3;4];
   stream_of_list [-1;-2;-3;-4];
   stream_of_list [51;52;53;54]]);;
take 15 (
merge_stream
  [stream_of_list [1;2;3;4];
   stream_of_list [-1;-2];
   stream_of_list [51;52;53;54]]);;

take 20 (mplusf (stream_of_list [1;2;3;4;5]) (fun () -> stream_of_list [10;11;12]));;
take 20 (mplusf (stream_of_list [1;2;3]) (fun () -> stream_of_list [10;11;12;13]));;
take 20 (merge_stream [stream_of_list [1;2;3;4;5]; stream_of_list [10;11;12]]);;
*)
