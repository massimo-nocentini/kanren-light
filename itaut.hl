  let IMPLICATE (t:term) : thm =
    let th1 = AP_THM NOT_DEF (dest_neg t) in
    CONV_RULE (RAND_CONV BETA_CONV) th1;;

  let CONJUNCTS_THEN' : thm_tactic -> thm_tactic =
    fun ttac cth ->
      ttac(CONJUNCT1 cth) THEN ttac(CONJUNCT2 cth);;

  let RIGHT_REVERSIBLE_TAC : tactic = FIRST
   [CONJ_TAC;                                                     (* and     *)
    GEN_TAC;                                                      (* forall  *)
    DISCH_TAC;                                                    (* implies *)
    (fun gl -> CONV_TAC(K(IMPLICATE(snd gl))) gl);                (* not     *)
    EQ_TAC];;                                                     (* iff     *)

  let LEFT_REVERSIBLE_TAC : thm_tactic =
   fun th gl -> tryfind (fun ttac -> ttac th gl)
     [CONJUNCTS_THEN' ASSUME_TAC;                                 (* and    *)
      DISJ_CASES_TAC;                                             (* or     *)
      CHOOSE_TAC;                                                 (* exists *)
      (fun th -> ASSUME_TAC (EQ_MP (IMPLICATE (concl th)) th));   (* not    *)
      (CONJUNCTS_THEN' MP_TAC o uncurry CONJ o EQ_IMP_RULE)];;    (* iff    *)

let TRACE_TAC msg : tactic =
  fun gl ->
    report msg;
    ALL_TAC gl;;

let TRACE_SLV msg : solver =
  TACTIC_SLV (TRACE_TAC msg);;

let DISJ_SLV : solver =
  fun (_,gl) as mgl ->
    (if is_disj (snd gl)
     then CONCAT_SLV (TACTIC_SLV DISJ1_TAC) (TACTIC_SLV DISJ2_TAC)
     else TACTIC_SLV ALL_TAC)
    mgl;;

let rec DEPTH_ITAUT_SLV n : solver =
  fun g ->
    report ("Depth "^string_of_int n);
    if n <= 0 then NO_SLV g else
    (
    print_goal (snd g);
    THEN_SLV
      (TACTIC_SLV (REPEAT
        (ACCEPT_TAC TRUTH ORELSE
         FIRST_ASSUM CONTR_TAC ORELSE
         RIGHT_REVERSIBLE_TAC ORELSE
         FIRST_X_ASSUM LEFT_REVERSIBLE_TAC)))
    (CONCAT_SLV
      (THEN_SLV (TRACE_SLV "ACCEPT")
         (COLLECT_ASSUM_SLV (fun th ->
            (SOLVER (fun mvs -> UNIFY_ACCEPT_TAC mvs th)))))
      (THEN_SLV DISJ_SLV
        (COLLECT_SLV
           [THEN_SLV (TRACE_SLV "META_SPEC")
              (COLLECT_X_ASSUM_SLV
                 (fun th -> 
                   THEN_SLV
                     (TACTIC_SLV
                       (fun g ->
                          (let gv = genvar(type_of(fst(dest_forall(concl th)))) in
                          (ASSUME_TAC th THEN META_SPEC_TAC gv th) g)))
                     (fun g -> DEPTH_ITAUT_SLV (n - 2) g)));
            THEN_SLV (TRACE_SLV "EXISTS")
              (THEN_SLV (TACTIC_SLV (fun gl ->
                           let gv = genvar(type_of(fst(dest_exists(snd gl)))) in
                           X_META_EXISTS_TAC gv gl))
                        (fun g -> DEPTH_ITAUT_SLV (n - 2) g));
            THEN_SLV (TRACE_SLV "SUBGOAL")
              (THEN_SLV
                 (COLLECT_X_ASSUM_SLV (fun th -> TACTIC_SLV
                    (fun g -> SUBGOAL_THEN (fst(dest_imp(concl th)))
                                (fun ath ->
                                   ASSUME_TAC (MP th ath) THEN
                                   TRACE_TAC
                                     ("Subgoal solved depth: "^string_of_int n^
                                      "\nHP: "^string_of_thm (MP th ath))
                                   ) g)))
                 (fun g -> DEPTH_ITAUT_SLV (n - 1) g))]))) g
    );;


(*
  let rec ITAUT_TAC : term list -> int -> tactic =
    fun mvs n gl ->
      if n <= 0 then failwith "ITAUT_TAC: Too deep" else
      ((FIRST_ASSUM (UNIFY_ACCEPT_TAC mvs)) ORELSE
       (ACCEPT_TAC TRUTH) ORELSE
       (FIRST_ASSUM CONTR_TAC) ORELSE
       (RIGHT_REVERSIBLE_TAC THEN TRY (ITAUT_TAC mvs n)) ORELSE
       (FIRST_X_ASSUM LEFT_REVERSIBLE_TAC THEN TRY(ITAUT_TAC mvs n)) ORELSE
       (FIRST_X_ASSUM(fun th -> ASSUME_TAC th THEN
         (let gv = genvar(type_of(fst(dest_forall(concl th)))) in
          META_SPEC_TAC gv th THEN
          ITAUT_TAC (gv::mvs) (n - 2) THEN NO_TAC))) ORELSE
       (DISJ1_TAC THEN ITAUT_TAC mvs n THEN NO_TAC) ORELSE
       (DISJ2_TAC THEN ITAUT_TAC mvs n THEN NO_TAC) ORELSE
       (fun gl -> let gv = genvar(type_of(fst(dest_exists(snd gl)))) in
                  (X_META_EXISTS_TAC gv THEN
                   ITAUT_TAC (gv::mvs) (n - 2) THEN NO_TAC) gl) ORELSE
       (FIRST_ASSUM(fun th -> SUBGOAL_THEN (fst(dest_imp(concl th)))
                                (fun ath -> ASSUME_TAC (MP th ath)) THEN
                              ITAUT_TAC mvs (n - 1) THEN NO_TAC))) gl;;
*)

(*
let ITAUT_TAC =
  let rec ITAUT_ITERDEEP_TAC n gl =
    remark ("Searching with limit "^(string_of_int n));
    ((ITAUT_TAC [] n THEN NO_TAC) ORELSE ITAUT_ITERDEEP_TAC (n + 1)) gl in
  ITAUT_ITERDEEP_TAC 0;;
*)

let ITAUT_SLV =
  let rec ITAUT_ITERDEEP_SLV n gl =
    remark ("Searching with limit "^(string_of_int n));
    CONCAT_SLV (DEPTH_ITAUT_SLV n) (ITAUT_ITERDEEP_SLV (n + 1)) gl in
  ITAUT_ITERDEEP_SLV 0;;

let gstate::_ = take 2 (DEPTH_ITAUT_SLV 4 ([],([],`a ==> ~ ~a`)));;
wrapup gstate;;

ITAUT
    `(!x y z. padre x y /\ padre y z ==> nonno x z) /\
     padre A D /\
     padre D E
     ==> ?X. nonno X E`;;

(wrapup o get o DEPTH_ITAUT_SLV 6)
  ([],([],`(!x y. p x /\ q y ==> q x) /\ p a /\ q b ==> q a`));;

(wrapup o get o DEPTH_ITAUT_SLV 10)
  ([],([],
    `(!x y z. padre x y /\ padre y z ==> nonno x z) /\
     padre A B /\ padre B C /\
     padre A D /\ padre D E
     ==> ?X. nonno X E`));;

(wrapup o get o DEPTH_ITAUT_SLV 10)
  ([],([],
    `(!x y z. padre x y /\ padre y z ==> nonno x z) /\
     padre A D /\ padre D E /\
     padre A B /\ padre B C
     ==> ?X. nonno X E`));;

