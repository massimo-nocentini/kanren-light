(* ========================================================================= *)
(* Semicertified interactive logic programming.                              *)
(*                                                                           *)
(* Examples from The Mystery of the Monte Carlo Lock.                        *)
(*                                                                           *)
(* Copyright (c) 2017-2019 Marco Maggesi, Massimo Nocentini                  *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Further solvers.                                                          *)
(* ------------------------------------------------------------------------- *)

(* Cut goals of the form ?- F *)
let FALSE_SLV : solver =
  fun (_,(_,w)) as mgl ->
    if w = `F` then Empty else TACTIC_SLV ALL_TAC mgl;;

let tracing = ref true;;

let trace msg = warn !tracing msg;;

let TRACE_TAC : string -> tactic =
  fun msg g -> trace msg; ALL_TAC g;;

let TRACE_SLV : string -> solver =
  fun msg g -> TACTIC_SLV (TRACE_TAC msg) g;;

let TRACEON_SLV : string -> solver -> solver =
  fun msg slv g -> trace msg; slv g;;

(* ------------------------------------------------------------------------- *)
(* Reverse append.                                                           *)
(* ------------------------------------------------------------------------- *)

let REVAPPEND = new_definition
  `REVAPPEND p t : A list = APPEND (REVERSE p) t`;;

let REVAPPEND_CLAUSES = prove
 (`(!t:A list. REVAPPEND [] t = t) /\
   (!x:A p t. REVAPPEND (CONS x p) t = REVAPPEND p (CONS x t))`,
  REWRITE_TAC[REVAPPEND; REVERSE; APPEND; GSYM APPEND_ASSOC]);;

let REVERSE_EQ_REVAPPEND = prove
 (`!l:A list. REVERSE l = REVAPPEND l []`,
  REWRITE_TAC[REVAPPEND; APPEND_NIL]);;

(* ------------------------------------------------------------------------- *)
(* Horn rules for finding all l1 l2 such that `l = APPEND l1 l2`.            *)
(* ------------------------------------------------------------------------- *)

let LIST_EQ_APPEND_HORN = prove
 (`(!l:A list. l = APPEND [] l) /\
   (!h:A t l1 l2. t = APPEND l1 l2 ==> CONS h t = APPEND (CONS h l1) l2)`,
  SIMP_TAC[APPEND]);;

let LIST_EQ_APPEND_SLV : solver =
  let pth1,pth2 = CONJ_PAIR LIST_EQ_APPEND_HORN in
  REPEAT_SLV
    (CONCAT_SLV (ACCEPT_SLV pth1) (RULE_SLV pth2));;

gg `??l1 l2. [1;2;3;4;5;6;7] = APPEND l1 l2`;;
ee LIST_EQ_APPEND_SLV;;
(mapfilter (function Some a -> snd a | _ -> fail()) o take 10) (top_thms());;

(* ------------------------------------------------------------------------- *)
(* First example.                                                            *)
(* ------------------------------------------------------------------------- *)

let LOCK_RULES,LOCK_INDUCT,LOCK_CASES = new_inductive_definition
  `(!x. LOCK (CONS 2 x) x) /\
   (!x y. LOCK x y ==> LOCK (CONS 3 x) (APPEND y (CONS 2 y)))`;;

let LOCK_RULE1,LOCK_RULE2 = CONJ_PAIR LOCK_RULES;;

let LOCK_RULE2_HORN = prove
 (`!x y z. z = APPEND y (CONS 2 y) /\ LOCK x y ==> LOCK (CONS 3 x) z`,
  MESON_TAC[LOCK_RULE2]);;

(* ------------------------------------------------------------------------- *)
(* Solution using tactics.                                                   *)
(* ------------------------------------------------------------------------- *)

g `LOCK [3;2;3] [3;2;3]`;;
e (MATCH_MP_TAC LOCK_RULE2_HORN);;
e (EXISTS_TAC `[3]`);;
e (REWRITE_TAC[APPEND]);;
e (MATCH_ACCEPT_TAC LOCK_RULE1);;
top_thm();;

time MESON
  [LOCK_RULES; APPEND]
  `LOCK [3;2;3] [3;2;3]`;;

time METIS
  [LOCK_RULES; APPEND]
  `LOCK [3;2;3] [3;2;3]`;;

(* ------------------------------------------------------------------------- *)
(* Solution using solvers.                                                   *)
(* ------------------------------------------------------------------------- *)

let LOCK_RULE1_SLV : solver =
  APPLY_SLV LOCK_RULE1;;

let LOCK_RULE2_SLV : solver -> solver =
  fun slv ->
    THEN_SLV (APPLY_SLV LOCK_RULE2_HORN)
             (THENL_SLV (TACTIC_SLV CONJ_TAC)
                        [LIST_EQ_APPEND_SLV;
                         slv]);;

let rec LOCK_SLV : solver =
  fun g ->
    CONCAT_SLV LOCK_RULE1_SLV
               (LOCK_RULE2_SLV LOCK_SLV) g;;

let sols = solve LOCK_SLV `??x. LOCK x x`;;

(* The first solution. *)
get sols;;

(* [3;2;3] Ã¨ l'unico punto fisso, se cerchiamo altre soluzioni diverge.
   next sols;;
*)

(* ------------------------------------------------------------------------- *)
(* Miscellanea on lists.                                                     *)
(* ------------------------------------------------------------------------- *)

(* TODO: Remove *)
(*
g `!l:A list. l = APPEND [] l`;;
e (REWRITE_TAC[APPEND]);;
let REFL_APPEND_NIL = top_thm();;

g `!h:A t t' l1 l2.
     l1 = CONS h t' /\ t = APPEND t' l2 ==> CONS h t = APPEND l1 l2`;;
e (REPEAT STRIP_TAC THEN REPEAT (FIRST_X_ASSUM SUBST_VAR_TAC));;
e (REWRITE_TAC[APPEND]);;
let CONS_EQ_APPEND = top_thm();;
*)

(* ------------------------------------------------------------------------- *)
(* Second example.                                                           *)
(*                                                                           *)
(* M-I:   For any number X,  2X2 produces X.                                 *)
(* M-II:  If X produces Y, then 6X produces 2Y.                              *)
(* M-III: If X produces Y, then 4X produces REVERSE Y.                       *)
(* M-IV:  If X produces Y, then 5X produces YY.                              *)
(* ------------------------------------------------------------------------- *)

let LOCK2_RULES,LOCK2_INDUCT,LOCK2_CASES = new_inductive_definition
  `(!x. LOCK2 (CONS 2 (APPEND x [2])) x) /\
   (!x y. LOCK2 x y ==> LOCK2 (CONS 6 x) (CONS 2 y)) /\
   (!x y. LOCK2 x y ==> LOCK2 (CONS 4 x) (REVERSE y)) /\
   (!x y. LOCK2 x y ==> LOCK2 (CONS 5 x) (APPEND y y))`;;

let [L1;L2;L3;L4] = CONJUNCTS LOCK2_RULES;;

let L1_HORN = prove
 (`!x y. x = APPEND y [2] ==> LOCK2 (CONS 2 x) y`,
  MESON_TAC[L1]);;

let L3_HORN = prove
 (`!x y z. REVERSE z = y /\ LOCK2 x y ==> LOCK2 (CONS 4 x) z`,
  MESON_TAC[L3; REVERSE_REVERSE]);;

let L4_HORN = prove
 (`!x y z. z = APPEND y y /\ LOCK2 x y ==> LOCK2 (CONS 5 x) z`,
  MESON_TAC[L4]);;

g `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;
e (SUBGOAL_THEN `[5;4;6;4;2;5;4;6;4;2] = APPEND [5;4;6;4;2] [5;4;6;4;2]`
     (fun th -> GEN_REWRITE_TAC RAND_CONV [th]));;
e (REWRITE_TAC[APPEND]);;
e (MATCH_MP_TAC L4_HORN);;
e (EXISTS_TAC `[5;4;6;4;2]`);;
e CONJ_TAC;;
e REFL_TAC;;
e (GEN_REWRITE_TAC RAND_CONV [GSYM (REWRITE_CONV [REVERSE; APPEND]
     `REVERSE [2;4;6;4;5]`)]);;
e (MATCH_MP_TAC L3);;
e (MATCH_MP_TAC L2);;
e (GEN_REWRITE_TAC RAND_CONV [GSYM (REWRITE_CONV [REVERSE; APPEND]
     `REVERSE [5;4;6;4]`)]);;
e (MATCH_MP_TAC L3);;
e (GEN_REWRITE_TAC LAND_CONV [GSYM (REWRITE_CONV [APPEND]
     `(CONS 2 (APPEND [5;4;6;4] [2]))`)]);;
e (MATCH_ACCEPT_TAC L1);;
top_thm();;

let REVAPPEND_RULES = prove
 (`(!l:A list. l = REVAPPEND [] l) /\
   (!x:A l m p. l = REVAPPEND m (CONS x p) ==> l = REVAPPEND (CONS x m) p)`,
  REWRITE_TAC[REVAPPEND_CLAUSES]);;

let REVAPPEND_HORN1,REVAPPEND_HORN2 = CONJ_PAIR REVAPPEND_RULES;;

gg `??m n. [1;2;3] = REVAPPEND m n`;;
ee (ACCEPT_SLV REVAPPEND_HORN1);;
list_of_stream (top_thms());;
ee (RULE_SLV REVAPPEND_HORN2);;

ee (CONCAT_SLV (ACCEPT_SLV REVAPPEND_HORN1)
               (RULE_SLV REVAPPEND_HORN2));;
ss();;

let COMPUTE_REVERSE_TAC : tactic =
  GEN_REWRITE_TAC LAND_CONV [REVERSE_EQ_REVAPPEND] THEN
  REWRITE_TAC[REVAPPEND_CLAUSES];;

let EQ_REVERSE_SLV : solver =
  THEN_SLV (TACTIC_SLV COMPUTE_REVERSE_TAC) REFL_SLV;;

let LOCK_1_SLV : solver =
  THEN_SLV (RULE_SLV L1_HORN)
           (THEN_SLV (TACTIC_SLV (REWRITE_TAC[APPEND])) REFL_SLV);;

let LOCK_2_SLV : solver =
  RULE_SLV L2;;

let LOCK_3_SLV : solver =
  THEN_SLV (RULE_SLV L3_HORN)
           (THENL_SLV (TACTIC_SLV CONJ_TAC)
            [EQ_REVERSE_SLV; TACTIC_SLV ALL_TAC]);;

let LOCK_4_SLV : solver =
  THEN_SLV (RULE_SLV L4_HORN)
   (THENL_SLV (TACTIC_SLV CONJ_TAC) [LIST_EQ_APPEND_SLV; TACTIC_SLV ALL_TAC]);;

let LOCK_1_SLV : solver = TRACEON_SLV "L1" LOCK_1_SLV;;
let LOCK_2_SLV : solver = TRACEON_SLV "L2" LOCK_2_SLV;;
let LOCK_3_SLV : solver = TRACEON_SLV "L3" LOCK_3_SLV;;
let LOCK_4_SLV : solver = TRACEON_SLV "L4" LOCK_4_SLV;;

let PRINT_TAC : tactic -> tactic =
  fun tac g ->
    let gstate = tac g in
    print_goalstate gstate;
    gstate;;

let PRINT_SLV : solver -> solver =
  let f gstate =
    print_goalstate gstate;
    gstate in
  fun slv g ->
    let gstates = slv g in
    if gstates = Empty
    then (trace "PRINT_SLV: No solutions"; Empty)
    else stream_map f gstates;;

let rec LOCK2_SLV : int -> solver =
  fun d g ->
    trace (string_of_int d);
    if d > 7 then Empty else
    CONCAT_SLV LOCK_1_SLV
      (THEN_SLV
        (PRINT_SLV
          (INTERLEAVE_SLV [LOCK_2_SLV;
                           LOCK_3_SLV;
                           LOCK_4_SLV])) (LOCK2_SLV (d + 1)))
      g;;

let pth1,pth2 = CONJ_PAIR LIST_EQ_APPEND_HORN;;

let pslv1 = ACCEPT_SLV pth1;;
let pslv2 = RULE_SLV pth2;;

let LIST_EQ_APPEND_SLV : solver =
  REPEAT_SLV (CONCAT_SLV pslv1 pslv2);;

let rec LIST_EQ_APPEND_SLV : solver =
  fun g -> (CONCAT_SLV pslv1 (THEN_SLV pslv2 LIST_EQ_APPEND_SLV)) g;;

gg `[5; 4; 6; 2] = APPEND [6; 4; 5] [2]`;;
ee pslv2;;
top_thms();;

gg `??l. LOCK2 l l`;;
ee (LOCK2_SLV 0);;

ee LOCK_4_SLV;;
ee LOCK_3_SLV;;
ee (RULE_SLV L2);;
ee (PRINT_SLV (RULE_SLV L1_HORN));;
ee pslv1;;
ee pslv2;;

ee (THEN_SLV (RULE_SLV L1_HORN) (PRINT_SLV LIST_EQ_APPEND_SLV));;
ee (LIST_EQ_APPEND_SLV);;
tt (REWRITE_TAC[APPEND]);;


let REVERSE_THM = prove
 (`!l m:A list. l = REVERSE m <=> l = REVAPPEND m []`,
  REWRITE_TAC[REVERSE_EQ_REVAPPEND]);;

(!l:A list. l = REVEAPPEND [] l) /\
(CONS h t = REVAPPEND (CONS h t) m

(* ------------------------------------------------------------------------- *)
(* HIC SUNT LEONES!!!                                                        *)
(* ------------------------------------------------------------------------- *)


(*
let REVERSE_UNIQUE = prove
 (`!l l':A list. l = REVERSE l' <=> REVERSE l = l'`,
  MESON_TAC[REVERSE_REVERSE]);;

let COMPUTE_REVERSE_TAC : tactic =
  GEN_REWRITE_TAC I [REVERSE_UNIQUE] THEN
  REWRITE_TAC[REVAPPEND_CLAUSES];;
*)


let LIST_CLAUSES = prove
 (`(!l1 l2:A list. l1 = [] /\ l2 = [] ==> APPEND l1 l2 = []) /\
   (!l1 l2:A list. l1 = [] /\ l2 = [] ==> [] = APPEND l1 l2) /\
   (!h:A t l1 l2. l1 = [] /\ CONS h t = l2 ==> CONS h t = APPEND l1 l2) /\
   (!h:A t l1 l2. l1 = [] /\ CONS h t = l2 ==> APPEND l1 l2 = CONS h t) /\
   (!h:A t l1 l2 s. l1 = CONS h s /\ t = APPEND s l2 ==> APPEND l1 l2 = CONS h t) /\
   (!h:A t l1 l2 s. l1 = CONS h s /\ t = APPEND s l2 ==> CONS h t = APPEND l1 l2) /\
   (!l1 l2 m1 m2 x:A list. APPEND l1 l2 = x /\ APPEND m1 m2 = x ==> APPEND l1 l2 = APPEND m1 m2)`,
  SIMP_TAC[APPEND]);;

let APPEND_NIL_RULE = prove
 (`[]:A list = APPEND [] []`,
  REWRITE_TAC[APPEND]);;

let APPEND_CONS_RULE = prove
 (`!x:A l l'. l' = APPEND l (CONS x l)
              ==> CONS x l' = APPEND (CONS x l) (CONS x l)`,
  SIMP_TAC[APPEND]);;

let APPEND_CONS_RULE_EQ = prove
 (`!x:A l l'.
    CONS x l' = APPEND (CONS x l) (CONS x l) <=> l' = APPEND l (CONS x l)`,
  REWRITE_TAC[APPEND; CONS_11]);;

let CONS_APPEND_SLV : solver =
  MAP_COLLECT_SLV APPLY_SLV [APPEND_NIL_RULE; APPEND_CONS_RULE];;

let APPEND_APPEND_INTRO_CLAUSE = prove
 (`!l t:A list. l = APPEND t (REVAPPEND [] t) ==> l = APPEND t t`,
  REWRITE_TAC[REVAPPEND_CLAUSES]);;

let APPEND_REVAPPEND_NIL_RULE = prove
 (`[]:A list = APPEND [] (REVAPPEND [] [])`,
  REWRITE_TAC[APPEND; REVAPPEND_CLAUSES]);;

let APPEND_REVAPPEND_CONS_RULE = prove
 (`!x:A p t l. l = APPEND t (REVAPPEND (CONS x p) t)
               ==> CONS x l = APPEND (CONS x t) (REVAPPEND p (CONS x t))`,
  REWRITE_TAC[REVAPPEND_CLAUSES; APPEND; CONS_11]);;

let APPEND_REVAPPEND_CONS_RULE_EQ = prove
 (`!x:A p t l. CONS x l = APPEND (CONS x t) (REVAPPEND p (CONS x t)) <=>
               l = APPEND t (REVAPPEND (CONS x p) t)`,
  REWRITE_TAC[REVAPPEND_CLAUSES; APPEND; CONS_11]);;

let EQ_APPEND_NIL = prove
  (`!l1 l2:A list. l1 = l2 ==> l1 = APPEND [] l2`,
   REWRITE_TAC[APPEND]);;

let REVERSE_UNIQUE = prove
 (`!l l':A list. REVERSE l = l' ==> l = REVERSE l'`,
  MESON_TAC[REVERSE_REVERSE]);;

(* NON FUNZIONA *)
(*)
gg `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;
ee (THEN_SLV (APPLY_SLV L4_HORN) (TACTIC_SLV CONJ_TAC));;
ee (APPLY_SLV APPEND_APPEND_INTRO_CLAUSE);;

ee (APPLY_SLV APPEND_REVAPPEND_CONS_CLAUSE);;

ee (THEN_SLV (APPLY_SLV EQ_APPEND_NIL)
     (THEN_SLV (TACTIC_SLV (REWRITE_TAC[REVAPPEND_CLAUSES; NOT_CONS_NIL]))
               FALSE_SLV));;
*)

(*
ee CONS_APPEND_SLV;;
ee (APPLY_SLV APPEND_CONS_CLAUSE);;
ee CONS_APPEND_SLV;;
ss();;
*)

let FOO_SLV : solver =
  (REPEAT_SLV
    (CONCAT_SLV
      (THEN_SLV
        (APPLY_SLV EQ_APPEND_NIL)
        (THEN_SLV
          (TACTIC_SLV (REWRITE_TAC[REVAPPEND_CLAUSES; NOT_CONS_NIL; CONS_11]))
          FALSE_SLV))
      (APPLY_SLV APPEND_REVAPPEND_CONS_RULE)));;

let L4_HORN_SLV : solver =
  THEN_SLV (APPLY_SLV L4_HORN)
           (THENL_SLV (TACTIC_SLV CONJ_TAC)
                      [TACTIC_SLV ALL_TAC;
                       LIST_EQ_APPEND_SLV]);;

let CONS_EQ_APPEND_SLV : solver =
  THENL_SLV
     (TACTIC_SLV
        (MATCH_MP_TAC CONS_EQ_APPEND THEN
         META_EXISTS_TAC THEN
         CONJ_TAC))
  [REFL_SLV; TACTIC_SLV ALL_TAC];;

let LIST_LEMMAS = CONJUNCTS LIST_CLAUSES;;

(* TODO: Serve? *)
let REVERSE_CLAUSES_ALT = prove
 (`(!l:A list. l = [] ==> l = REVERSE []) /\
  (!h:A t l s. APPEND s [h] = l /\ s = REVERSE t ==> l = REVERSE (CONS h t))`,
  CONJ_TAC THENL
  [MESON_TAC[REVERSE_EQ_EMPTY];
   REWRITE_TAC[REVERSE] THEN MESON_TAC[]]);;

let REVERSE_CLAUSES = prove
 (`(!l:A list. l = [] ==> [] = REVERSE l) /\
   (!l h:A t s. l = APPEND s [h] /\ t = REVERSE s ==> CONS h t = REVERSE l)`,
  CONJ_TAC THENL
  [MESON_TAC[REVERSE_EQ_EMPTY]; ALL_TAC] THEN
  LIST_INDUCT_TAC THENL
  [MESON_TAC[APPEND_EQ_NIL; NOT_CONS_NIL]; ALL_TAC] THEN
  REPEAT GEN_TAC THEN REWRITE_TAC[REVERSE] THEN
  POP_ASSUM MP_TAC THEN
  STRUCT_CASES_TAC (ISPEC `t:A list` list_CASES) THEN
  STRUCT_CASES_TAC (ISPEC `s:A list` list_CASES) THEN
  REWRITE_TAC[REVERSE; APPEND; CONS_11] THEN
  MESON_TAC[APPEND_EQ_NIL; NOT_CONS_NIL; APPEND]);;

let REVERSE_LEMMAS = CONJUNCTS REVERSE_CLAUSES;;


let LIST_SIMPL_SLV : solver =
  THEN_SLV (TACTIC_SLV
             (REWRITE_TAC[APPEND; REVERSE;
                          APPEND_EQ_NIL; REVERSE_EQ_EMPTY;
                          CONS_11; NOT_CONS_NIL]))
           (THEN_SLV FALSE_SLV
                     (TACTIC_SLV (REPEAT CONJ_TAC)));;

let LIST_EQ_STEP_SLV : solver =
  THEN_SLV LIST_SIMPL_SLV
    (COLLECT_SLV
      [REFL_SLV;
       TACTIC_SLV CONJ_TAC;
       MAP_COLLECT_SLV APPLY_SLV (LIST_LEMMAS @ REVERSE_LEMMAS)]);;

let LIST_EQ_APPEND_SLV : solver =
  THEN_SLV (REPEAT_SLV LIST_EQ_STEP_SLV)
           LIST_SIMPL_SLV;;

(* Example. *)
gg `??l. [1;2;3] = REVERSE l`;;
ee LIST_EQ_APPEND_SLV;;
top_thms();;

let LOCK2_SLV : solver = MAP_COLLECT_SLV APPLY_SLV [L1; L2; L3_HORN; L4_HORN];;

let L1_SLV : solver = THEN_SLV (APPLY_SLV L1_HORN) LIST_EQ_APPEND_SLV;;

let L2_SLV : solver = APPLY_SLV L2;;

let L3_SLV : solver =
  THEN_SLV (APPLY_SLV L3_HORN)
    (THENL_SLV (TACTIC_SLV CONJ_TAC)
      [THEN_SLV (APPLY_SLV REVERSE_UNIQUE)
        (THEN_SLV (TACTIC_SLV (REWRITE_TAC[REVERSE; APPEND]))
          REFL_SLV)
      ;
      TACTIC_SLV ALL_TAC]);;

let L4_SLV : solver =
  THEN_SLV (APPLY_SLV L4_HORN)
    (THENL_SLV (TACTIC_SLV CONJ_TAC)
      [THEN_SLV
        (APPLY_SLV APPEND_APPEND_INTRO_CLAUSE)
        FOO_SLV
      ;
      TACTIC_SLV ALL_TAC]);;


let CONS_EQ_APPEND_NIL = prove
 (`!h:A t l1 l2. l1 = [] /\ CONS h t = l2 ==> CONS h t = APPEND l1 l2`,
  MESON_TAC[APPEND]);;

let CONS_EQ_APPEND_CONS = prove
(`!h:A t l1 l2 s. l1 = CONS h s /\ t = APPEND s l2 ==> CONS h t = APPEND l1 l2`,
  MESON_TAC[APPEND]);;

gg `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;
ee (APPLY_SLV L4_HORN);;
tt CONJ_TAC;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_NIL);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee REFL_SLV;;
ee (APPLY_SLV L3_HORN);;
tt CONJ_TAC;;
ee LIST_EQ_APPEND_SLV;;
tt (REWRITE_TAC[APPEND]);;
ee (APPLY_SLV L2);;
ee (APPLY_SLV L3_HORN);;
tt CONJ_TAC;;
ee LIST_EQ_APPEND_SLV;;
tt (REWRITE_TAC[APPEND]);;
ee (APPLY_SLV L1_HORN);;
tt (REWRITE_TAC[APPEND]);;
let Cons (Some (_, th), _) = top_thms();;

(* Tentativi con MESON e METIS. *)
(* Non ce la fa. *)
(*;;
time MESON
  [LOCK2_RULES; REVERSE; APPEND; REFL_APPEND_NIL; CONS_EQ_APPEND]
  `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;

time METIS
  [LOCK2_RULES; REVERSE; APPEND; REFL_APPEND_NIL; CONS_EQ_APPEND]
  `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;
*)

gg `LOCK2 [5;4;6;4;2;5;4;6;4;2] [5;4;6;4;2;5;4;6;4;2]`;;
ee (THEN_SLV (APPLY_SLV L4_HORN) (TACTIC_SLV CONJ_TAC));;
ee (APPLY_SLV EQ_APPEND_NIL);;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;

tt (TACTIC_SLV CONJ_TAC);;
ee REFL_SLV;;
tt (THEN_SLV (REWRITE_TAC[NOT_CONS_NIL]) FALSE_SLV);;


ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_CONS);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee (APPLY_SLV CONS_EQ_APPEND_NIL);;
tt CONJ_TAC;;
ee REFL_SLV;;
ee REFL_SLV;;
ee (APPLY_SLV L3_HORN);;
tt CONJ_TAC;;
ee LIST_EQ_APPEND_SLV;;
tt (REWRITE_TAC[APPEND]);;
ee (APPLY_SLV L2);;
ee (APPLY_SLV L3_HORN);;
tt CONJ_TAC;;
ee LIST_EQ_APPEND_SLV;;
tt (REWRITE_TAC[APPEND]);;
ee (APPLY_SLV L1_HORN);;
tt (REWRITE_TAC[APPEND]);;
let Cons (Some (_, th), _) = top_thms();;
