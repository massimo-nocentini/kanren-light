(* ========================================================================= *)
(* Semicertified interactive logic programming.                              *)
(*                                                                           *)
(* Copyright (c) 2017-2018 Marco Maggesi, Massimo Nocentini                  *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Lisp symbolic expressions as an object language in HOL (and ML).          *)
(* Content of the file:                                                      *)
(*  - Sexps in ML, together with a parser and a printer.                     *)
(*  - Sexps in HOL, with syntax.                                             *)
(*  - A meta-circular evaluator for a lisp-like language.                    *)
(* ------------------------------------------------------------------------- *)

(* ------------------------------------------------------------------------- *)
(* Elementary support for sexps in ML.                                       *)
(* ------------------------------------------------------------------------- *)

type sexp =
    Symbol of string
  | List of (sexp list);;

(* ------------------------------------------------------------------------- *)
(* Printer for ML sexps.                                                     *)
(* ------------------------------------------------------------------------- *)

let rec pp_print_sexp fmt =
  function
    Symbol s -> pp_print_string fmt s
  | List l ->
      pp_open_box fmt 0; pp_print_string fmt "("; pp_open_box fmt 2;
      pp_print_sexps fmt l;
      pp_close_box fmt (); pp_print_string fmt ")"; pp_close_box fmt ()
and pp_print_sexps fmt =
  function
    [] -> ()
  | h :: t ->
     pp_print_sexp fmt h;
     do_list (fun s -> pp_print_space fmt (); pp_print_sexp fmt s) t;;

let string_of_sexp = print_to_string pp_print_sexp;;

(* ------------------------------------------------------------------------- *)
(* Parse for ML sexps.                                                       *)
(* ------------------------------------------------------------------------- *)

let rec parse_sexp =
  function
    [] -> raise Noparse
  | Resword ")" :: _ -> raise Noparse
  | Resword "(" :: rest ->
      (many parse_sexp ++ a (Resword ")") >> fun x -> List (fst x)) rest
  | Resword s :: rest | Ident s :: rest -> Symbol s,rest;;

let sexp_of_string s =
  let tm,l = (parse_sexp o lex o explode) s in
  if l = [] then tm
  else failwith "Unparsed input following sexp";;

(* ------------------------------------------------------------------------- *)
(* Internal representation of sexps.                                         *)
(* ------------------------------------------------------------------------- *)

let sexp_INDUCT,sexp_RECUR = define_type
  "sexp = Symbol string
        | List (sexp list)";;

(* ------------------------------------------------------------------------- *)
(* Basic constructors and destructors.                                       *)
(* ------------------------------------------------------------------------- *)

let mk_symbol =
  let c = `Symbol` in
  fun s -> mk_comb(c,mk_string s);;

let list_mk_sexp =
  let ty = `:sexp`
  and c = `List` in
  fun l -> mk_comb(c,mk_list(l,ty));;

let dest_symbol tm =
  try match tm with
        Comb(Const("Symbol",_),stm) -> dest_string stm
      | _ -> fail()
  with Failure _ -> failwith "dest_symbol";;

let list_dest_sexp tm =
  try match tm with
        Comb(Const("List",_),ltm) -> dest_list ltm
     | _ -> fail()
  with Failure _ -> failwith "list_dest_sexp";;

(* ------------------------------------------------------------------------- *)
(* Conversion between internal and external sexps.                           *)
(* ------------------------------------------------------------------------- *)

let rec mk_sexp =
  function
    Symbol s -> mk_symbol s
  | List l -> list_mk_sexp (map mk_sexp l);;

let rec dest_sexp tm =
  try Symbol (dest_symbol tm) with Failure _ ->
  try List (map dest_sexp (list_dest_sexp tm)) with Failure _ ->
  failwith "dest_sexp";;

(* ------------------------------------------------------------------------- *)
(* Construction of sexp preterms.                                            *)
(* ------------------------------------------------------------------------- *)

let pmk_list els =
  itlist (fun x y -> Combp(Combp(Varp("CONS",dpty),x),y))
         els (Varp("NIL",dpty));;

let pmk_bool =
  let tt = Varp("T",dpty) and ff = Varp("F",dpty) in
  fun b -> if b then tt else ff;;

let pmk_char c =
  let lis = map (fun i -> pmk_bool((c / (1 lsl i)) mod 2 = 1)) (0--7) in
  itlist (fun x y -> Combp(y,x)) lis (Varp("ASCII",dpty));;

let pmk_string s =
  let ns = 0--(String.length s - 1) in
  let c i = pmk_char (Char.code(String.get s i)) in
  pmk_list (map c ns);;

let pmk_symbol =
  let sy = Varp("Symbol",dpty) in
  fun s -> Combp(sy,pmk_string s);;

let list_pmk_sexp =
  let lst = Varp("List",dpty) in
  fun l -> Combp(lst,pmk_list l);;

let rec pmk_sexp =
  function
    Symbol s -> pmk_symbol s
  | List l -> list_pmk_sexp (map pmk_sexp l);;

(* ------------------------------------------------------------------------- *)
(* Custom printer for sexps.                                                 *)
(* ------------------------------------------------------------------------- *)

let pp_sexp_printer fmt tm =
  let l = map dest_sexp (list_dest_sexp tm) in
  pp_print_string fmt "'(";
  pp_open_box fmt 0;
  pp_print_sexps fmt l;
  pp_close_box fmt ();
  pp_print_string fmt ")";;

install_user_printer("sexp",pp_sexp_printer);;

(* ------------------------------------------------------------------------- *)
(* Custom parser for sexps.                                                  *)
(* ------------------------------------------------------------------------- *)

let parse_qsexp =
  let parse_sexps = many parse_sexp >> map pmk_sexp in
  let parse_tail_sexp =
    parse_sexps ++ a (Resword ")") >> list_pmk_sexp o fst in
  function 
    Ident "'" :: Resword "(" :: rest -> parse_tail_sexp rest
  | _ -> raise Noparse;;

install_parser("sexp",parse_qsexp);;

(* ------------------------------------------------------------------------- *)
(* Handy matcher for sexp analysis.                                          *)
(* ------------------------------------------------------------------------- *)

let MATCHSYMB_RULES,MATCHSYMB_INDUCT,MATCHSYMB_CASES =
  new_inductive_definition
  `!s. MATCHSYMB (Symbol s) s`;;

let MATCHTAGGED_RULES,MATCHTAGGED_INDUCT,MATCHTAGGED_CASES =
  new_inductive_definition
  `!s l. MATCHTAGGED s (List (CONS (Symbol s) l)) l`;;
