(* ========================================================================= *)
(* Kanren Light.                                                             *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Chains.                                                                   *)
(* ------------------------------------------------------------------------- *)

type inst = (term, term) func;;

let empty_inst : inst = undefined;;

type chain = unit -> inst;;

exception Choice of inst * chain;;

let empty : chain = fun () -> failwith "End of chain";;

let yield i : chain = fun () -> i;;

let rec const i : chain =
  fun () -> raise (Choice (i, const i));;

let rec sequential (k1:chain) (k2:unit->chain) : chain =
  fun () ->
    match
      try Some (k1 ()) with
        Failure _ -> None
      | Choice (i, k) -> raise (Choice (i, sequential k k2))
    with
      None -> k2 () ()
    | Some i -> raise (Choice (i, k2 ()));;

let rec bind (k:chain) (f:inst->chain) : chain =
  try f (k ())
  with Choice (i, k') -> sequential (f i) (fun () -> bind k' f);;

let rec mplusf (k1:chain) (k2:unit->chain) : chain =
  fun () ->
    match
      try Some (k1 ()) with
        Failure _ -> None
      | Choice (i, k) -> raise (Choice (i, mplusf (k2 ()) (fun () -> k)))
    with
      None -> k2 () ()
    | Some i -> raise (Choice (i, k2 ()));;

let rec bindi (k:chain) (f:inst->chain) : chain =
  try f (k ())
  with Choice (i, k') -> mplusf (f i) (fun () -> bindi k' f);;

let chain_map f c = bind c (yield o f);; 

let cons i k = raise (Choice (i, k));;

let rec chain_of_list =
  function
    [] -> empty
  | h :: t -> cons h (fun () -> chain_of_list t ());;

let peel (k:chain) : inst * chain =
  try k (), empty with Choice (i,k) -> i,k;;

let head k = fst (peel k);;
let tail k = snd (peel k);;

let rec take n k =
  if n <= 0 then [] else
  try let i,k' = peel k in i :: take (n - 1) k'
  with Failure _ -> [];;

(* ------------------------------------------------------------------------- *)
(* Examples.                                                                 *)
(* ------------------------------------------------------------------------- *)

let on_numeral f = mk_small_numeral o f o dest_small_numeral;;

let numeral_succ = on_numeral succ;;

let fresh_var s v = variant (dom s) v;;

let fresh_int : unit -> int =
  let count = ref 0 in
  fun () ->
    let n = !count in
    count := n + 1;
    n;;

type goal = inst -> chain;;

let fresh (c : term -> goal) : goal =
  fun s ->
    let v = fresh_var s (mk_var("n"^string_of_int(fresh_int()),`:num`)) in
    c v s;;

let rec unification tm1 tm2 : inst -> inst =
  fun s ->
    if is_var tm1 then (tm1 |-> tm2) s else
    if is_var tm2 then (tm2 |-> tm1) s else
    if is_const tm1 && is_const tm2 && tm1 = tm2 then s else
    if is_comb tm1 && is_comb tm2
    then let f1,x1 = dest_comb tm1 in
         let f2,x2 = dest_comb tm2 in
         let s' = unification x1 x2 s in
         unification f1 f2 s'
    else fail();;

let unify tm1 tm2 : goal =
  fun s -> yield (unification tm1 tm2 s);;

let disj (g1:goal) (g2:goal) : goal =
  fun i -> mplusf (g1 i) (fun () -> g2 i);;

let conj (g1:goal) (g2:goal) : goal =
  fun i -> bindi (g1 i) g2;;

map graph (take 10 (conj (unify `x:num` `5`) (unify `y:num` `7`) empty_inst));;

(* `p 1 2 \/ p 2 3 \/ p 2 4` *)
let gg =
  fresh (fun x -> fresh (fun y ->
    end_itlist disj
      [conj (unify x `1`) (unify y `2`);
       conj (unify x `2`) (unify y `3`);
       conj (unify x `3`) (unify y `4`)]));;

map graph (take 10 (gg empty_inst));;

let gg = fresh (fun x -> fresh (fun y -> conj (unify y `5`) (unify x `1`)));;

graph (hd (take 10 (gg empty_inst)));;

(* ------------------------------------------------------------------------- *)
(* Goal with natural numbers.                                                *)
(* ------------------------------------------------------------------------- *)

let gg = disj (unify `x:num` `1`)
              (disj (unify `x:num` `2`) (unify `x:num` `3`));;

map graph (take 10 (gg empty_inst));;

let nats_from (tm:term) : num -> goal =
  let rec nats n =
    fun i ->
      disj (unify tm (mk_numeral n))
           (nats (succ_num n)) i in
  nats;;

map graph (take 10 (nats_from `x:num` num_2 empty_inst));;
