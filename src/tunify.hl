(* ------------------------------------------------------------------------- *)
(* Unification for types.                                                    *)
(* Not needed anymore, an implementation by Michael Faerber is now           *)
(* available in HOL Light                                                    *)
(* ------------------------------------------------------------------------- *)

(*
let tunify : hol_type -> hol_type -> (hol_type * hol_type) list
             -> (hol_type * hol_type) list =
  let augment1 sofar (s,x) =
    let s' = type_subst sofar s in
    (* ACHTUNG! s -> s' ???? *)
    if mem x (tyvars s) && not (s = x) then failwith "augment_tyinsts"
    else (s',x) in
  let raw_augment_tyinsts p tyinsts =
    p::(map (augment1 [p]) tyinsts) in
  let augment_tyinsts(t,v) tyinsts =
    let t' = type_subst tyinsts t in
    if t' = v then tyinsts
    else if mem v (tyvars t') then failwith "augment_insts"
    else raw_augment_tyinsts (t',v) tyinsts in
  let rec tunify ty1 ty2 sofar =
    if ty1 = ty2 then sofar else
    if is_vartype ty1 then
      try let ty1' = rev_assoc ty1 sofar in
          tunify ty1' ty2 sofar
      with Failure "find" -> augment_tyinsts (ty2,ty1) sofar
    else if is_vartype ty2 then
      try let ty2' = rev_assoc ty2 sofar in
          tunify ty2' ty1 sofar
      with Failure "find" -> augment_tyinsts (ty1,ty2) sofar
    else
    let n1,lty1 = dest_type ty1 in
    let n2,lty2 = dest_type ty2 in
    if n1 <> n2 then failwith "type_unify" else
    itlist2 tunify lty1 lty2 sofar in
  tunify;;

let type_unify : hol_type -> hol_type -> (hol_type * hol_type) list =
  fun ty1 ty2 -> tunify ty1 ty2 [];;
*)

let rec type_term_unify : term -> term ->
     (hol_type * hol_type) list -> (hol_type * hol_type) list =
  fun tm1 tm2 sofar ->
    if is_var tm1 || is_const tm1 || is_var tm2 || is_const tm2 then
      type_unify (type_of tm1) (type_of tm2) sofar
    else if is_abs tm1 then
      type_term_unify (body tm1) (body tm2)
        (type_term_unify (bndvar tm1) (bndvar tm2) sofar)
    else
      let l1,r1 = dest_comb tm1 in
      let l2,r2 = dest_comb tm2 in
      type_term_unify l1 l2 (type_term_unify r1 r2 sofar);;

let term_ty_unify : term list -> term -> term -> instantiation =
  let mk_vars_eqs vars vlist =
    itlist
      (fun (Var(s,_) as v) l ->
         itlist
           (fun x l -> if name_of x = s then (v,x)::l else l)
           vlist
           l)
      vars
      [] in
  fun vars tm1 tm2 ->
    let tyin0 = type_term_unify tm1 tm2 [] in
    let tyin1 =
      itlist (fun (v1,v2) tyin -> type_unify (type_of v1) (type_of v2) tyin)
             (mk_vars_eqs vars (frees tm1))
             tyin0 in
    let tyin =
      itlist (fun (v1,v2) tyin -> type_unify (type_of v1) (type_of v2) tyin)
             (mk_vars_eqs vars (frees tm2))
             tyin1 in
    let finst = inst tyin in
    let tm1' = finst tm1
    and tm2' = finst tm2
    and vars' = map finst vars in
    let tmin = term_unify vars' tm1' tm2' in
    compose_insts ([],[],tyin) tmin;;

(* ------------------------------------------------------------------------- *)
(* Some tests.                                                               *)
(* ------------------------------------------------------------------------- *)

(*

(* type_unifty *)
;;
type_unify `:A` `:B` [];;
type_unify `:A` `:A` [];;
type_unify `:A` `:A list` [];;
type_unify `:A` `:B list` [];;
type_unify `:A list` `:A` [];;
type_unify `:B list` `:A` [];;
type_unify `:A#B` `:A list` [];;
type_unify `:A list` `:A#B` [];;
type_unify `:B list # A` `:A#B` [];;
type_unify `:B list # A` `:C#C` [];;

(* term_ty_unify *)
term_ty_unify [`x:A`] `x:A` `x:A`;;
term_ty_unify [`x:A`] `x:A` `b:A`;;
term_ty_unify [`x:A`] `x:A` `x:B`;;
term_ty_unify [`x:B`] `x:A` `x:B`;;
term_ty_unify [`x:B`] `x:A` `y:B`;;
term_ty_unify [`x:B`] `y:B` `x:A`;;

term_ty_unify [`x:A`] `x:A` `1`;;
term_ty_unify [`x:A`] `1` `x:A`;;

term_ty_unify [`x:A`;`y:B`] `1,x:A` `y:B,T`;;
term_ty_unify [`x:A`;`y:B`] `y:B,T` `1,x:A`;;

term_ty_unify [`x:A list`] `x:num list` `[]:A list`;;
term_ty_unify [`x:A list`] `x:num list` `[]:B list`;;
term_ty_unify [`x:A list`] `x:num list` `[]:num list`;;

*)
