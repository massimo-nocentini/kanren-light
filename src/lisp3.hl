(* ========================================================================= *)
(* Lispish meta-circular evaluator.                                          *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Printer for mgoalstacs.                                                   *)
(* ------------------------------------------------------------------------- *)

let print_goalstate (gs:goalstate) =
  let (_,gl,_) = gs in
  if gl = [] then () else
  do_list print_goal (rev gl);;

let (print_mgoalstack:mgoalstack->unit) =
  fun mgls ->
    if mgls = [] then Format.print_string "Empty mgoalstack" else
    let mgl = hd mgls in
    if mgl = Empty then Format.print_string "No (more) solutions" else
    print_goalstate (get mgl);;

#install_printer print_mgoalstack;;

(* ------------------------------------------------------------------------- *)
(* Misc list helper theory.                                                  *)
(* ------------------------------------------------------------------------- *)

let ALL2_RULES = prove
 (`(!R:A->B->bool. ALL2 R [] []) /\
   (!R h:A h':B t t'. R h h' /\ ALL2 R t t'
                      ==> ALL2 R (CONS h t) (CONS h' t'))`,
  REWRITE_TAC[ALL2]);;

let ALL2_NIL,ALL2_CONS =
  CONJ_PAIR (REWRITE_RULE [FORALL_AND_THM] ALL2_RULES);;

(* Rev-Assoc relation. *)
let RELASSOC_RULES,RELASSOC_INDUCT,RELASSOC_CASES = new_inductive_definition
  `(!k:A v:B l. RELASSOC k (CONS (v,k) l) v) /\
   (!k k' v v' l. ~(k = k') /\ RELASSOC k l v'
                  ==> RELASSOC k (CONS (v,k') l) v')`;;

let RELASSOC_HEAD,REALASSOC_TAIL = CONJ_PAIR RELASSOC_RULES;;

(* Zip-relation. *)
let ZIPPED_RULES,ZIPPED_INDUCT,ZIPPED_CASES = new_inductive_definition
  `ZIPPED [] [] [] /\
   (!x xs y ys zs. ZIPPED xs ys zs
                   ==> ZIPPED (CONS x xs) (CONS y ys) (CONS (x,y) zs))`;;

let ZIPPED_NIL,ZIPPED_CONS = CONJ_PAIR ZIPPED_RULES;;

(* ------------------------------------------------------------------------- *)
(* Helpers for sexp analyis.                                                 *)
(* ------------------------------------------------------------------------- *)

(* Matcher for lisp-like lambda forms. *)
let MATCHPROC_RULES,MATCHPROC_INDUCT,MATCHPROC_CASES = new_inductive_definition
  `!sexp vlist vars body.
     MATCHTAGGED "lambda" sexp [List vlist; body] /\
     ALL2 MATCHSYMB vlist vars
     ==> MATCHPROC sexp vars body`;;

let MATCHPROC1_RULES,MATCHPROC1_INDUCT,MATCHPROC1_CASES =
  new_inductive_definition
  `!sexp var body.
     MATCHTAGGED "lambda" sexp [List [Symbol var]; body]
     ==> MATCHPROC1 sexp var body`;;

let _ = prove
 (`MATCHPROC '(lambda (x y) (p x y)) ["x"; "y"] '(p x y)`,
  GEN_REWRITE_TAC I [MATCHPROC_CASES] THEN
  EXISTS_TAC `[Symbol "x"; Symbol "y"]` THEN
  CONJ_TAC THENL [MATCH_ACCEPT_TAC MATCHTAGGED_RULES; ALL_TAC] THEN
  MATCH_MP_TAC ALL2_CONS THEN
  CONJ_TAC THENL [MATCH_ACCEPT_TAC MATCHSYMB_RULES; ALL_TAC] THEN
  MATCH_MP_TAC ALL2_CONS THEN CONJ_TAC THENL
  [MATCH_ACCEPT_TAC MATCHSYMB_RULES; MATCH_ACCEPT_TAC ALL2_NIL]);;

let MATCHBETA_RULES,MATCHBETA_INDUCT,MATCHBETA_CASES = new_inductive_definition
  `!fn vars args body.
      MATCHPROC fn vars body
      ==> MATCHBETA (List (CONS fn args)) vars body args`;;

(* ------------------------------------------------------------------------- *)
(* Evaluation.                                                               *)
(* ------------------------------------------------------------------------- *)

let EVAL_RULES,EVAL_INDUCT,EVAL_CASES = new_inductive_definition
  `(!e p q. MATCHTAGGED "quote" p [q] ==> EVAL e p q) /\
   (!e a x. RELASSOC a e x ==> EVAL e (Symbol a) x) /\
   (!e f f' x x' v b y. MATCHPROC1 f' v b /\ EVAL e f f' /\
                        EVAL e x x' /\ EVAL (CONS (x',v) e) b y
                        ==> EVAL e (List [f; x]) y) /\
   (!e l. EVAL e (List (CONS (Symbol "lambda") l))
                 (List (CONS (Symbol "lambda") l))) /\
   (!e p l l'. MATCHTAGGED "list" p l /\ ALL2 (EVAL e) l l'
               ==> EVAL e p (List l'))`;;

let [EVAL_QUOTED; EVAL_SYMB; EVAL_APP; EVAL_LAMBDA; EVAL_LIST] =
  CONJUNCTS EVAL_RULES;;

(* ------------------------------------------------------------------------- *)
(* (define quinec                                                            *)
(*   '((lambda (x) (list x (list (quote quote) x)))                          *)
(*     (quote                                                                *)
(*       (lambda (x) (list x (list (quote quote) x))))))                     *)
(* ------------------------------------------------------------------------- *)

gg `??q. EVAL [] q q`;;
ee (APPLY_SLV EVAL_APP);;
  (* 1/4 *)
  ee CONJ_SLV;;
  ee (APPLY_SLV MATCHPROC1_RULES);;
  ee (APPLY_SLV MATCHTAGGED_RULES);;

  (* 2/4 *)
  ee CONJ_SLV;;
  ee (APPLY_SLV EVAL_LAMBDA);;

  (* 3/4 *)
  ee CONJ_SLV;;
  ee (APPLY_SLV EVAL_QUOTED);;
  ee (APPLY_SLV MATCHTAGGED_RULES);;

  (* 4/4 *)
  ee (APPLY_SLV EVAL_LIST);;

    (* 1/2 *)
    ee CONJ_SLV;;
    ee (APPLY_SLV MATCHTAGGED_RULES);;

    (* 2/2 *)
    ee (APPLY_SLV ALL2_CONS);;

      (* 1/2 *)
      ee CONJ_SLV;;
      ee (APPLY_SLV EVAL_SYMB);;
      ee (APPLY_SLV RELASSOC_HEAD);;

      (* 2/2 *)
      ee (APPLY_SLV ALL2_CONS);;

        (* 1/2 *)
        ee CONJ_SLV;;
        ee (APPLY_SLV EVAL_LIST);;

          (* 1/2 *)
          ee CONJ_SLV;;
          ee (APPLY_SLV MATCHTAGGED_RULES);;
         
          (* 2/2 *)
          ee (APPLY_SLV ALL2_CONS);;

            (* 1/2 *)
            ee CONJ_SLV;;
            ee (APPLY_SLV EVAL_QUOTED);;
            ee (APPLY_SLV MATCHTAGGED_RULES);;

            (* 2/2 *)
            ee (APPLY_SLV ALL2_CONS);;

              (* 1/2 *)
              ee CONJ_SLV;;
              ee (APPLY_SLV EVAL_SYMB);;
              ee (APPLY_SLV RELASSOC_HEAD);;

              (* 2/2 *)
              ee (APPLY_SLV ALL2_NIL);;

        (* 2/2 *)
        ee (APPLY_SLV ALL2_NIL);;

top_thm1();;
