(* ========================================================================= *)
(* Examples with list of numbers.                                            *)
(* ========================================================================= *)

needs "solvers.hl";;

type_invention_warning := false;;
needs "Permutation/make.ml";;
type_invention_warning := true;;

prioritize_num();;

(* ------------------------------------------------------------------------- *)
(* Append.                                                                   *)
(* ------------------------------------------------------------------------- *)

let APPEND_CONS = prove
 (`!x:A xs ys zs. APPEND xs ys = zs ==> APPEND (CONS x xs) ys = CONS x zs`,
  REWRITE_TAC[APPEND; CONS_11]);;

let NUM_APPEND_CONS = INST_TYPE [`:num`,aty] APPEND_CONS;;
let NUM_APPEND_NIL = INST_TYPE [`:num`,aty] (CONJUNCT1 APPEND);;

take 10 (solve
  (THEN_SLV (REPEAT_SLV (RULE_SLV NUM_APPEND_CONS))
            (ACCEPT_SLV NUM_APPEND_NIL))
  `??a b x y z. APPEND [1;a;3] [b;5] = [x;2;3;y;z]`);;

take 10 (solve (PROLOG_SLV [NUM_APPEND_NIL; NUM_APPEND_CONS])
               `??a b x y z. APPEND [1;a;3] [b;5] = [x;2;3;y;z]`);;

(* ------------------------------------------------------------------------- *)
(* Filter.                                                                   *)
(* ------------------------------------------------------------------------- *)

let FILTER_HORN = prove
 (`(!P:A->bool. FILTER P [] = []) /\
   (!P x:A xs ys. P x /\ FILTER P xs = ys
                  ==> FILTER P (CONS x xs) = CONS x ys) /\
   (!P x:A xs ys. ~P x /\ FILTER P xs = ys ==> FILTER P (CONS x xs) = ys)`,
  REWRITE_TAC[FILTER] THEN REPEAT STRIP_TAC THEN COND_CASES_TAC THEN
  ASM_REWRITE_TAC[] THEN ASM_MESON_TAC[]);;

let [NUM_FILTER_NIL; NUM_FILTER_LE_HORN; NUM_FILTER_GT_HORN] =
  CONJUNCTS (INST_TYPE [`:num`,aty] FILTER_HORN);;

(*
let PROLOG_SLV thl : solver =
  let rec PROLOG_SLV g = MAP_COLLECT_SLV STEP_SLV thl g
  and STEP_SLV : thm_solver =
    fun th ->
      try let rule = RULE_SLV th in
          EVERY_SLV [rule;
                     (TACTIC_SLV o EVERY)
                       [REPEAT CONJ_TAC; BETA_TAC; NUM_REDUCE_TAC];
                     PROLOG_SLV]
      with Failure _ -> ACCEPT_SLV th in
  THEN_SLV (TACTIC_SLV (REPEAT CONJ_TAC)) PROLOG_SLV;;
*)

let HORN_ARITH_LE = prove
 (`(!m n. m <= n ==> NUMERAL m <= NUMERAL n) /\
   _0 <= _0 /\
   (!n. n <= _0 ==> BIT0 n <= _0) /\
   (!n. _0 <= BIT0 n) /\
   (!n. _0 <= BIT1 n) /\
   (!m n. m <= n ==> BIT0 m <= BIT0 n) /\
   (!m n. m <= n ==> BIT0 m <= BIT1 n) /\
   (!m n. m < n ==> BIT1 m <= BIT0 n) /\
   (!m n. m <= n ==> BIT1 m <= BIT1 n) /\
   (!m n. n < m ==> ~(m <= n)) /\
   (!m n. n <= m ==> m >= n) /\
   (!m n. m < n ==> ~(m >= n))`,
  REWRITE_TAC[GE; NOT_LE; ARITH_LE]);;

let HORN_ARITH_LT = prove
 (`(!m n. m < n ==> NUMERAL m < NUMERAL n) /\
   (!n. _0 < n ==> _0 < BIT0 n) /\
   (!n. _0 < BIT1 n) /\
   (!m n. m < n ==> BIT0 m < BIT0 n) /\
   (!m n. m <= n ==> BIT0 m < BIT1 n) /\
   (!m n. m < n ==> BIT1 m < BIT0 n) /\
   (!m n. m < n ==> BIT1 m < BIT1 n) /\
   (!m n. n <= m ==> ~(m < n)) /\
   (!m n. n < m ==> m > n) /\
   (!m n. m <= n ==> ~(m > n))`,
  REWRITE_TAC[GT; NOT_LT; ARITH_LT]);;

let solve_filter =
  let filter_thml = CONJUNCTS (INST_TYPE [`:num`,aty] FILTER_HORN)
  and le_thml = CONJUNCTS HORN_ARITH_LE
  and lt_thml = CONJUNCTS HORN_ARITH_LT in
  let thml = filter_thml @ le_thml @ lt_thml in
  solve (PROLOG_SLV thml);;

take 10 (solve_filter `2 <= 3`);;
take 10 (solve_filter `~(3 <= 2)`);;
take 10 (solve_filter `2 < 3`);;
take 10 (solve_filter `~(3 < 2)`);;
take 10 (solve_filter `3 > 2`);;
take 10 (solve_filter `3 >= 2`);;
take 10 (solve_filter `~(2 > 3)`);;
take 10 (solve_filter `~(2 >= 3)`);;

take 10 (solve_filter `??ys. FILTER ((>=) 3) [] = ys`);;
take 10 (solve_filter `??ys. FILTER ((>=) 3) [1] = ys`);;
take 10 (solve_filter `??ys. FILTER ((>=) 3) [5] = ys`);;
take 10 (solve_filter `??ys. FILTER ((>=) 3) [1;5;2] = ys`);;

(* ------------------------------------------------------------------------- *)
(* Sort.                                                                     *)
(* ------------------------------------------------------------------------- *)

let SORT = new_definition
  `SORT le xs ys <=> xs:A list PERMUTED ys /\ ORDERED le ys`;;

let SORT_NIL = prove
 (`!le. SORT (le:A->A->bool) [] []`,
  REWRITE_TAC[SORT; PERMUTED_RULES; ORDERED_RULES]);;

let QUICKSORT = prove
 (`!le:A->A->bool.
     (!x y. le x y \/ le y x) /\
     (!x y z. le x y /\ le y z ==> le x z)
     ==> SORT le [] [] /\
         (!x xs ys xs1 xs2 ys1 ys2.
            FILTER (\y. le y x) xs = xs1 /\
            SORT le xs1 ys1 /\
            FILTER (\y. ~le y x) xs = xs2 /\
            SORT le xs2 ys2 /\
            APPEND ys1 (CONS x ys2) = ys
            ==> SORT le (CONS x xs) ys)`,
  REWRITE_TAC[SORT_NIL] THEN INTRO_TAC "!le; total trans" THEN
  REPEAT GEN_TAC THEN INTRO_TAC "fil1 sor1 fil2 sor2 app" THEN
  REPEAT (FIRST_X_ASSUM SUBST_VAR_TAC) THEN
  REWRITE_TAC[SORT] THEN CONJ_TAC THENL
  [REWRITE_TAC[PERMUTED_COUNT; COUNT; COUNT_APPEND] THEN FIX_TAC "[y]" THEN
   HYP_TAC "sor1: c1 _" (REWRITE_RULE[SORT; PERMUTED_COUNT]) THEN
   HYP_TAC "sor2: c2 _" (REWRITE_RULE[SORT; PERMUTED_COUNT]) THEN
   REMOVE_THEN "c1" (fun th -> REWRITE_TAC[GSYM th]) THEN
   REMOVE_THEN "c2" (fun th -> REWRITE_TAC[GSYM th]) THEN
   REWRITE_TAC[COUNT_FILTER] THEN
   ASM_CASES_TAC `le (y:A) (x:A):bool` THEN ASM_REWRITE_TAC[] THEN ARITH_TAC;
   ALL_TAC] THEN
  HYP_TAC "sor1: fil1 ord1" (REWRITE_RULE[SORT]) THEN
  HYP_TAC "sor2: fil2 ord2" (REWRITE_RULE[SORT]) THEN
  ASM_REWRITE_TAC[ORDERED_APPEND; ORDERED_CONS] THEN
  CONJ_TAC THENL
  [REMOVE_THEN "fil2" (fun th -> REWRITE_TAC[MATCH_MP PERMUTED_ALL
       (ONCE_REWRITE_RULE[PERMUTED_SYM] th)]) THEN
   REWRITE_TAC[ALL_FILTER; GSYM ALL_MEM] THEN
   HYP MESON_TAC "total" [];
   ALL_TAC] THEN
  REMOVE_THEN "fil1" (fun th -> REWRITE_TAC[MATCH_MP PERMUTED_ALL
      (ONCE_REWRITE_RULE[PERMUTED_SYM] th)]) THEN
  REWRITE_TAC[ALL_FILTER] THEN GEN_REWRITE_TAC I [GSYM ALL_MEM] THEN
  REWRITE_TAC[ALL] THEN INTRO_TAC "![y]; y; xy" THEN
  ASM_REWRITE_TAC[] THEN
  REMOVE_THEN "fil2" (fun th -> REWRITE_TAC[MATCH_MP PERMUTED_ALL
      (ONCE_REWRITE_RULE[PERMUTED_SYM] th)]) THEN
  REWRITE_TAC[ALL_FILTER; GSYM ALL_MEM] THEN ASM_MESON_TAC[]);;

let NUM_QUICKSORT = prove
 (`SORT ((<=):num->num->bool) [] [] /\
   (!x xs ys xs1 xs2 ys1 ys2.
      FILTER ((>=) x) xs = xs1 /\
      SORT (<=) xs1 ys1 /\
      FILTER ((<) x) xs = xs2 /\
      SORT (<=) xs2 ys2 /\
      APPEND ys1 (CONS x ys2) = ys
      ==> SORT ((<=):num->num->bool) (CONS x xs) ys)`,
  MP_TAC (ISPEC `((<=):num->num->bool)` QUICKSORT) THEN
  ANTS_TAC THENL [ARITH_TAC; ALL_TAC] THEN
  SUBGOAL_THEN `!x:num. (\y. y <= x) = ((>=) x)`
    (fun th -> REWRITE_TAC[th]) THENL
  [GEN_TAC THEN REWRITE_TAC[FUN_EQ_THM; GE]; ALL_TAC] THEN
  SUBGOAL_THEN `!x:num. (\y. ~(y <= x)) = ((<) x)`
    (fun th -> REWRITE_TAC[th]) THEN
  GEN_TAC THEN REWRITE_TAC[FUN_EQ_THM; NOT_LE]);;

let LIST_NUM_REFL = MESON [] `!l:num list. l = l`;;

let quicksort_solver =
  (solve o PROLOG_SLV)
    (CONJUNCTS NUM_QUICKSORT @
     [NUM_APPEND_NIL; NUM_APPEND_CONS] @
     CONJUNCTS (INST_TYPE [`:num`,aty] FILTER_HORN) @
     CONJUNCTS HORN_ARITH_LE @
     CONJUNCTS HORN_ARITH_LT);;

take 10 (quicksort_solver `??ys. SORT (<=) [] ys`);;
take 10 (quicksort_solver `??ys. SORT (<=) [3] ys`);;
take 10 (quicksort_solver `??ys. SORT (<=) [3;1] ys`);;
take 10 (quicksort_solver `??ys. SORT (<=) [1;3] ys`);;
take 10 (quicksort_solver `??ys. SORT (<=) [3;3] ys`);;
take 10 (quicksort_solver `??ys. SORT (<=) [12;3;3;23;7;9;12] ys`);;

take 10 (quicksort_solver `??ys. SORT (<=) [12;3;3;23;7;9;12] (CONS 3 ys)`);;
take 10 (quicksort_solver `??y ys. SORT (<=) [12;3;3;23;7;9;12] (CONS y ys)`);;
take 10 (quicksort_solver `??ys zs. SORT (<=) [7;3;0] (APPEND ys zs)`);;

take 10 (quicksort_solver `??xs ys. APPEND xs ys = [1;2;3]`);;

(* ========================================================================= *)
(* Hic sunt leones.                                                          *)
(* ========================================================================= *)

(* ------------------------------------------------------------------------- *)
(* Reverse.                                                                  *)
(* ------------------------------------------------------------------------- *)

let NUM_REVERSE_NIL = INST_TYPE [`:num`,aty] (CONJUNCT1 REVERSE);;

let REVERSE_HORN = prove
 (`!x:A xs ys zs. REVERSE xs = ys /\ APPEND ys [x] = zs
                  ==> REVERSE (CONS x xs) = zs`,
  REWRITE_TAC[REVERSE] THEN MESON_TAC[]);;

let REVERSE_MIXED_HORN = prove
 (`!x:A xs ys. REVERSE xs = ys ==> REVERSE (CONS x xs) = APPEND ys [x]`,
  REWRITE_TAC[REVERSE] THEN MESON_TAC[]);;

let NUM_REVERSE_HORN = INST_TYPE [`:num`,aty] REVERSE_HORN;;
let NUM_REVERSE_MIXED_HORN = INST_TYPE [`:num`,aty] REVERSE_MIXED_HORN;;

take 10 (solve (PROLOG_SLV (CONJUNCTS NUM_REVERSE_HORN @
                            [NUM_REVERSE_NIL; NUM_APPEND_CONS; NUM_APPEND_NIL]))
               `??ys:num list. REVERSE [] = ys`);;

take 10 (solve (PROLOG_SLV (CONJUNCTS NUM_REVERSE_HORN @
                            [NUM_REVERSE_NIL; NUM_APPEND_CONS; NUM_APPEND_NIL]))
               `??ys. REVERSE [1;2;3] = ys`);;

take 10 (solve (PROLOG_SLV (CONJUNCTS NUM_REVERSE_HORN @
                            CONJUNCTS NUM_REVERSE_MIXED_HORN @
                            [NUM_REVERSE_NIL; NUM_APPEND_CONS; NUM_APPEND_NIL]))
               `??ys. REVERSE [1;2;3] = ys`);;

(* ------------------------------------------------------------------------- *)
(* Length.                                                                   *)
(* ------------------------------------------------------------------------- *)

let NUM_LENGTH_HORN = prove
 (`LENGTH ([]:num list) = 0 /\
  (!h:num t n m. LENGTH t = m /\ n = SUC m ==> LENGTH (CONS h t) = n)`,
  REWRITE_TAC[LENGTH] THEN MESON_TAC[]);;

let NUM_LENGTH_NIL, NUM_LENGTH_CONS_HORN = CONJ_PAIR NUM_LENGTH_HORN;;

take 10 (solve (PROLOG_SLV[NUM_LENGTH_NIL; NUM_LENGTH_CONS_HORN; ARITH_RULE `!n. n:num = n`])
               `??n. LENGTH [1;2;3] = n`);;

THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                    (TACTIC_SLV (REPEAT CONJ_TAC)))
  [THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                       (TACTIC_SLV (REPEAT CONJ_TAC)))
    [THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                         (TACTIC_SLV (REPEAT CONJ_TAC)))
       [ACCEPT_SLV NUM_LENGTH_NIL; ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)];
     ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)];
   ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)]
  ([`n:num`],([],`LENGTH[1;2;3] = n`));;

(take 10 o solve
(THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                    (TACTIC_SLV (REPEAT CONJ_TAC)))
  [THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                       (TACTIC_SLV (REPEAT CONJ_TAC)))
    [THENL_SLV (THEN_SLV (RULE_SLV NUM_LENGTH_CONS_HORN)
                         (TACTIC_SLV (REPEAT CONJ_TAC)))
       [ACCEPT_SLV NUM_LENGTH_NIL; ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)];
     ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)];
   ACCEPT_SLV (ARITH_RULE `!n. n:num = n`)]);;

kprove(`??n. LENGTH [1;2;3] = n`, LENGTH_SLV);;
kprove(`??x:num xs. LENGTH (CONS x xs) = 1`, LENGTH_SLV);;
kprove(`??xs:num list. LENGTH xs = 1`, LENGTH_SLV);;
